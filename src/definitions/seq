((definition size (match s O (S (size squo)))) (definition nilp (eq_op (size s) O)) (definition ohead (match s None (Some x))) (definition head (match s x0 x)) (definition behead (match s nil squo)) (definition ncons (iter n (cons x))) (definition nseq (ncons n x nil)) (definition seqn (x)) (definition cat (match s1 s2 (cons x (cat s1quo s2)))) (definition rcons (match s (cons z nil) (cons x (rcons squo z)))) (definition last (match s x (last xquo squo))) (definition belast (match s nil (cons x (belast xquo squo)))) (definition nth (match s x0 (match n x (nth squo nquo)))) (definition set_nth (match s (ncons n x0 (cons y nil)) (match n (cons y squo) (cons x (set_nth squo nquo y))))) (definition find (match s O (match (a x) O (S (find squo))))) (definition filter (match s nil (match (a x) (cons x (filter squo)) (filter squo)))) (definition count (match s O (addn (a x) (count squo)))) (definition has (match s false (orb (a x) (has squo)))) (definition all (match s true (andb (a x) (all squo)))) (definition drop (match s s (match n s (drop nquo squo)))) (definition take (match s nil (match n nil (cons x (take nquo squo))))) (definition rot (cat (drop n s) (take n s))) (definition rotr (rot (subn (size s) n) s)) (definition catrev (match s1 s2 (catrev s1quo (cons x s2)))) (definition rev (nosimpl catrev s nil : forall T)) (definition eqseq (match s1 (match s2 true false) (match s2 false (andb (eq_op x1 x2) (eqseq s1quo s2quo))))) (definition constant (match s true (all (pred1 x) squo))) (definition uniq (match s true (andb (negb (in_mem x (mem squo))) (uniq squo)))) (definition undup (match s nil (match (in_mem x (mem squo)) (undup squo) (cons x (undup squo))))) (definition index (find (pred1 x))) (definition inE ((msp:simpl_pred T) x0)) (definition bitseq (list bool)) (definition incr_nth (match v (ncons i O (cons (S O) nil)) (match i (cons (S n) vquo) (cons n (incr_nth vquo iquo))))) (definition same_count1 (eq_op (count (pred1 x) s1) (count (pred1 x) s2))) (definition perm_eq (all (same_count1 s1 s2) (cat s1 s2))) (definition mask (match m nil (match s nil (match b (cons x (mask mquo squo)) (mask mquo squo))))) (definition subseq (match s2 (eq_op s1 nil) (match s1 true (subseq match (eq_op x y) s1quo s1 s2quo)))) (definition rem (match s s (match (eq_op y x) t (cons y (rem t))))) (definition map (match s nil (cons (f x) (map squo)))) (definition iota (match n nil (cons m (iota (S m) nquo)))) (definition mkseq (map f (iota O n))) (definition foldr (match s z0 (f x (foldr squo)))) (definition sumn (foldr addn O)) (definition foldl (match s z (foldl (f z x) squo))) (definition pairmap (match s nil (cons (f x y) (pairmap y squo)))) (definition scanl (match s nil (let xquo := g x y in cons xquo (scanl xquo squo)))) (definition unzip2 (map (snd (B:=T)))) (definition flatten (foldr cat nil)) (definition shape (map size)) (definition allpairs (foldr (fun x : S => cat (map (f x) t)) nil s)))