((definition eqn (match m (match n true false) (match n false (eqn mquo nquo)))) (definition addn_rec (plus)) (definition addn (nosimpl addn_rec)) (definition subn_rec (minus)) (definition subn (nosimpl subn_rec)) (definition leq (eq_op (subn m n) O)) (definition geq (leq n m)) (definition ltn (leq (S m) n)) (definition gtn (leq (S n) m)) (definition monotone (forall m n : nat, eq (leq (f m) (f n)) (leq m n))) (definition maxn (match (leq (S m) n) n m)) (definition minn (match (leq (S m) n) m n)) (definition ex_minn (s2val find_ex_minn)) (definition ex_maxn (subn m (ex_minn ex_maxn_subproof))) (definition iter (match m x (f (loop i)) in loop n)) (definition iteri (match m x (f i (loop i)) in loop n)) (definition iterop (nosimpl iteri n f)) (definition muln_rec (mult)) (definition muln (nosimpl muln_rec)) (definition expn_rec (iterop n muln m (S O))) (definition expn (nosimpl expn_rec)) (definition fact_rec (match n (S O) (muln n (fact_rec nquo)))) (definition factorial (nosimpl fact_rec)) (definition odd (match n false (negb (odd nquo)))) (definition double_rec (match n O (S (S (double_rec nquo))))) (definition double (nosimpl double_rec)) (definition half (match n n (uphalf nquo) uphalf (n : nat) : nat := match n n (S (half nquo)) for half)) (definition half_double (doubleK)) (definition double_inj (can_inj doubleK : injective double Expanded type for implicit arguments double_inj : forall x1 x2)) (definition leqif (prod (leq m n) (eq (eq_op m n) c))) (definition add (match m n (add mquo (S n)))) (definition add_mul (match m s (add_mul mquo n (add n s)))) (definition mul (match m O (add_mul mquo n n))) (definition mul_exp (match n p (mul_exp m nquo (mul m p)))) (definition exp (match n (S O) (mul_exp m nquo m))) (definition odd (match n (eqn n (S O)) (eqn n (S O)) (odd nquo))) (definition double (match n O (add nquo (S n)))) (definition nat_of_pos (match p0 (S (double (nat_of_pos p))) (double (nat_of_pos p)) (S O))) (definition pos_of_nat (match n0 xH (match m0 (xI (pos_of_nat n n)) (xO (pos_of_nat n n)) (pos_of_nat n m)))) (definition bin_of_nat (match n0 N0 (Npos (pos_of_nat n n)))))