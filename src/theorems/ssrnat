((theorem succnK (cancel S Peano.pred)) (theorem succn_inj (injective S)) (theorem eqnP (Equality.axiom eqn)) (theorem eqnE (eq eqn eq_op)) (theorem eqSS (eq (eq_op (S m) (S n)) (eq_op m n))) (theorem nat_irrelevance (eq E Equo)) (theorem addnE (eq addn addn_rec)) (theorem plusE (eq plus addn)) (theorem add0n (left_id O addn)) (theorem addSn (eq (addn (S m) n) (S (addn m n)))) (theorem add1n (eq (addn (S O) n) (S n))) (theorem addn0 (right_id O addn)) (theorem addnS (eq (addn m (S n)) (S (addn m n)))) (theorem addSnnS (eq (addn (S m) n) (addn m (S n)))) (theorem addnCA (left_commutative addn)) (theorem addnC (commutative addn)) (theorem addn1 (eq (addn n (S O)) (S n))) (theorem addnA (associative addn)) (theorem addnAC (right_commutative addn)) (theorem addnACA (interchange addn addn)) (theorem addn_eq0 (eq (eq_op (addn m n) O) (andb (eq_op m O) (eq_op n O)))) (theorem eqn_add2l (eq (eq_op (addn p m) (addn p n)) (eq_op m n))) (theorem eqn_add2r (eq (eq_op (addn m p) (addn n p)) (eq_op m n))) (theorem addnI (right_injective addn)) (theorem addIn (left_injective addn)) (theorem addn2 (eq (addn m (S (S O))) (S (S m)))) (theorem add2n (eq (addn (S (S O)) m) (S (S m)))) (theorem addn3 (eq (addn m (S (S (S O)))) (S (S (S m))))) (theorem add3n (eq (addn (S (S (S O))) m) (S (S (S m))))) (theorem addn4 (eq (addn m (S (S (S (S O))))) (S (S (S (S m)))))) (theorem add4n (eq (addn (S (S (S (S O)))) m) (S (S (S (S m)))))) (theorem subnE (eq subn subn_rec)) (theorem minusE (eq minus subn)) (theorem sub0n (left_zero O subn)) (theorem subn0 (right_id O subn)) (theorem subnn (self_inverse O subn)) (theorem subSS (eq (subn (S m) (S n)) (subn m n))) (theorem subn1 (eq (subn n (S O)) (Peano.pred n))) (theorem subn2 (eq (subn n (S (S O))) (Peano.pred (Peano.pred n)))) (theorem subnDl (eq (subn (addn p m) (addn p n)) (subn m n))) (theorem subnDr (eq (subn (addn m p) (addn n p)) (subn m n))) (theorem addKn (cancel (addn n) (fun x : nat => subn x n))) (theorem addnK (cancel (fun x : nat => addn x n) (fun x : nat => subn x n))) (theorem subSnn (eq (subn (S n) n) (S O))) (theorem subnDA (eq (subn n (addn m p)) (subn (subn n m) p))) (theorem subnAC (right_commutative subn)) (theorem subnS (eq (subn m (S n)) (Peano.pred (subn m n)))) (theorem subSKn (eq (Peano.pred (subn (S m) n)) (subn m n))) (theorem ltnS (eq (leq (S m) (S n)) (leq m n))) (theorem leq0n (leq O n)) (theorem ltn0Sn (leq (S O) (S n))) (theorem ltn0 (eq (leq (S n) O) false)) (theorem leqnn (leq n n)) (theorem ltnSn (leq (S n) (S n))) (theorem eq_leq (leq m n)) (theorem leqnSn (leq n (S n))) (theorem leq_pred (leq (Peano.pred n) n)) (theorem leqSpred (leq n (S (Peano.pred n)))) (theorem ltn_predK (eq (S (Peano.pred n)) n)) (theorem prednK (eq (S (Peano.pred n)) n)) (theorem leqNgt (eq (leq m n) (negb (leq (S n) m)))) (theorem ltnNge (eq (leq (S m) n) (negb (leq n m)))) (theorem ltnn (eq (leq (S n) n) false)) (theorem leqn0 (eq (leq n O) (eq_op n O))) (theorem lt0n (eq (leq (S O) n) (negb (eq_op n O)))) (theorem lt0n_neq0 (negb (eq_op n O))) (theorem eqn0Ngt (eq (eq_op n O) (negb (leq (S O) n)))) (theorem neq0_lt0n (leq (S O) n)) (theorem eqn_leq (eq (eq_op m n) (andb (leq m n) (leq n m)))) (theorem anti_leq (antisymmetric leq)) (theorem neq_ltn (eq (negb (eq_op m n)) (orb (leq (S m) n) (leq (S n) m)))) (theorem gtn_eqF (eq (eq_op n m) false)) (theorem ltn_eqF (eq (eq_op m n) false)) (theorem leq_eqVlt (eq (leq m n) (orb (eq_op m n) (leq (S m) n)))) (theorem ltn_neqAle (eq (leq (S m) n) (andb (negb (eq_op m n)) (leq m n)))) (theorem leq_trans (leq m p)) (theorem leq_ltn_trans (leq (S m) p)) (theorem ltnW (leq m n)) (theorem leqW (leq m (S n))) (theorem ltn_trans (leq (S m) p)) (theorem leq_total (orb (leq m n) (leq n m))) (theorem leP (reflect (le m n) (leq m n))) (theorem le_irrelevance (eq le_mn1 le_mn2)) (theorem ltP (reflect (lt m n) (leq (S m) n))) (theorem lt_irrelevance (eq lt_mn1 lt_mn2)) (theorem leqP (leq_xor_gtn m n (leq m n) (leq (S n) m))) (theorem ltnP (ltn_xor_geq m n (leq n m) (leq (S m) n))) (theorem posnP (eqn0_xor_gt0 n (eq_op n O) (leq (S O) n))) (theorem ltngtP (compare_nat m n (leq (S m) n) (leq (S n) m) (eq_op m n))) (theorem leq_add2l (eq (leq (addn p m) (addn p n)) (leq m n))) (theorem ltn_add2l (eq (leq (S (addn p m)) (addn p n)) (leq (S m) n))) (theorem leq_add2r (eq (leq (addn m p) (addn n p)) (leq m n))) (theorem ltn_add2r (eq (leq (S (addn m p)) (addn n p)) (leq (S m) n))) (theorem leq_add (leq (addn m1 m2) (addn n1 n2))) (theorem leq_addr (leq n (addn n m))) (theorem leq_addl (leq n (addn m n))) (theorem ltn_addr (leq (S m) (addn n p))) (theorem ltn_addl (leq (S m) (addn p n))) (theorem addn_gt0 (eq (leq (S O) (addn m n)) (orb (leq (S O) m) (leq (S O) n)))) (theorem subn_gt0 (eq (leq (S O) (subn n m)) (leq (S m) n))) (theorem subn_eq0 (eq (eq_op (subn m n) O) (leq m n))) (theorem leq_subLR (eq (leq (subn m n) p) (leq m (addn n p)))) (theorem leq_subr (leq (subn n m) n)) (theorem subnKC (eq (addn m (subn n m)) n)) (theorem subnK (eq (addn (subn n m) m) n)) (theorem addnBA (eq (addn m (subn n p)) (subn (addn m n) p))) (theorem subnBA (eq (subn m (subn n p)) (subn (addn m p) n))) (theorem subKn (eq (subn n (subn n m)) m)) (theorem subSn (eq (subn (S n) m) (S (subn n m)))) (theorem subnSK (eq (S (subn n (S m))) (subn n m))) (theorem leq_sub2r (leq (subn m p) (subn n p))) (theorem leq_sub2l (leq (subn p n) (subn p m))) (theorem leq_sub (leq (subn m1 n1) (subn m2 n2))) (theorem ltn_sub2r (leq (S (subn m p)) (subn n p))) (theorem ltn_sub2l (leq (S (subn p n)) (subn p m))) (theorem ltn_subRL (eq (leq (S n) (subn p m)) (leq (S (addn m n)) p))) (theorem subn_if_gt (E)) (theorem max0n (left_id O maxn)) (theorem maxn0 (right_id O maxn)) (theorem maxnC (commutative maxn)) (theorem maxnE (eq (maxn m n) (addn m (subn n m)))) (theorem maxnAC (right_commutative maxn)) (theorem maxnA (associative maxn)) (theorem maxnCA (left_commutative maxn)) (theorem maxnACA (interchange maxn maxn)) (theorem maxn_idPl (reflect (eq (maxn x5417 x5418) x5417) (leq x5418 x5417))) (theorem maxn_idPr (reflect (eq (maxn x5441 x5442) x5442) (leq x5441 x5442))) (theorem maxnn (idempotent maxn)) (theorem leq_max (eq (leq m (maxn n1 n2)) (orb (leq m n1) (leq m n2)))) (theorem leq_maxl (leq m (maxn m n))) (theorem leq_maxr (leq n (maxn m n))) (theorem gtn_max (eq (leq (S (maxn n1 n2)) m) (andb (leq (S n1) m) (leq (S n2) m)))) (theorem geq_max (eq (leq (maxn n1 n2) m) (andb (leq n1 m) (leq n2 m)))) (theorem maxnSS (eq (maxn (S m) (S n)) (S (maxn m n)))) (theorem addn_maxl (left_distributive addn maxn)) (theorem addn_maxr (right_distributive addn maxn)) (theorem min0n (left_zero O minn)) (theorem minn0 (right_zero O minn)) (theorem minnC (commutative minn)) (theorem addn_min_max (eq (addn (minn m n) (maxn m n)) (addn m n))) (theorem minnE (eq (minn m n) (subn m (subn m n)))) (theorem minnAC (right_commutative minn)) (theorem minnA (associative minn)) (theorem minnCA (left_commutative minn)) (theorem minnACA (interchange minn minn)) (theorem minn_idPl (reflect (eq (minn x6241 x6242) x6241) (leq x6241 x6242))) (theorem minn_idPr (reflect (eq (minn x6265 x6266) x6266) (leq x6266 x6265))) (theorem minnn (idempotent minn)) (theorem leq_min (eq (leq m (minn n1 n2)) (andb (leq m n1) (leq m n2)))) (theorem gtn_min (eq (leq (S (minn n1 n2)) m) (orb (leq (S n1) m) (leq (S n2) m)))) (theorem geq_min (eq (leq (minn n1 n2) m) (orb (leq n1 m) (leq n2 m)))) (theorem geq_minl (leq (minn m n) m)) (theorem geq_minr (leq (minn m n) n)) (theorem addn_minr (right_distributive addn minn)) (theorem addn_minl (left_distributive addn minn)) (theorem minnSS (eq (minn (S m) (S n)) (S (minn m n)))) (theorem maxnK (eq (minn (maxn m n) m) m)) (theorem maxKn (eq (minn n (maxn m n)) n)) (theorem minnK (eq (maxn (minn m n) m) m)) (theorem minKn (eq (maxn n (minn m n)) n)) (theorem maxn_minl (left_distributive maxn minn)) (theorem maxn_minr (right_distributive maxn minn)) (theorem minn_maxl (left_distributive minn maxn)) (theorem minn_maxr (right_distributive minn maxn)) (theorem find_ex_minn (leq m n)) (theorem ex_minnP (ex_minn_spec ex_minn)) (theorem ex_maxn_subproof (nat => P (subn m i))) (theorem ex_maxnP (ex_maxn_spec ex_maxn)) (theorem eq_ex_minn (eq (ex_minn exP) (ex_minn exQ))) (theorem eq_ex_maxn (eq (ex_maxn exP ubP) (ex_maxn exQ ubQ))) (theorem iterSr (eq (iter (S n) f x) (iter n f (f x)))) (theorem iterS (eq (iter (S n) f x) (f (iter n f x)))) (theorem iter_add (eq (iter (addn n m) f x) (iter n f (iter m f x)))) (theorem iteriS (eq (iteri (S n) f x) (f n (iteri n f x)))) (theorem iteropS (eq (iterop (S n) op x idx) (iter n (op x) x))) (theorem eq_iter (eqfun (iter n f) (iter n fquo))) (theorem eq_iteri (eqfun (iteri n f) (iteri n fquo))) (theorem eq_iterop (eqrel (iterop n op) (iterop n opquo))) (theorem multE (eq mult muln)) (theorem mulnE (eq muln muln_rec)) (theorem mul0n (left_zero O muln)) (theorem muln0 (right_zero O muln)) (theorem mul1n (left_id (S O) muln)) (theorem mulSn (eq (muln (S m) n) (addn n (muln m n)))) (theorem mulSnr (eq (muln (S m) n) (addn (muln m n) n))) (theorem mulnS (eq (muln m (S n)) (addn m (muln m n)))) (theorem mulnSr (eq (muln m (S n)) (addn (muln m n) m))) (theorem muln1 (right_id (S O) muln)) (theorem mulnC (commutative muln)) (theorem mulnDl (left_distributive muln addn)) (theorem mulnDr (right_distributive muln addn)) (theorem mulnBl (left_distributive muln subn)) (theorem mulnBr (right_distributive muln subn)) (theorem mulnA (associative muln)) (theorem mulnCA (left_commutative muln)) (theorem mulnAC (right_commutative muln)) (theorem mulnACA (interchange muln muln)) (theorem muln_eq0 (eq (eq_op (muln m n) O) (orb (eq_op m O) (eq_op n O)))) (theorem muln_eq1 (eq (eq_op (muln m n) (S O)) (andb (eq_op m (S O)) (eq_op n (S O))))) (theorem muln_gt0 (eq (leq (S O) (muln m n)) (andb (leq (S O) m) (leq (S O) n)))) (theorem leq_pmull (leq m (muln n m))) (theorem leq_pmulr (leq m (muln m n))) (theorem leq_mul2l (eq (leq (muln m n1) (muln m n2)) (orb (eq_op m O) (leq n1 n2)))) (theorem leq_mul2r (eq (leq (muln n1 m) (muln n2 m)) (orb (eq_op m O) (leq n1 n2)))) (theorem leq_mul (leq (muln m1 m2) (muln n1 n2))) (theorem eqn_mul2l (eq (eq_op (muln m n1) (muln m n2)) (orb (eq_op m O) (eq_op n1 n2)))) (theorem eqn_mul2r (eq (eq_op (muln n1 m) (muln n2 m)) (orb (eq_op m O) (eq_op n1 n2)))) (theorem leq_pmul2l (eq (leq (muln m n1) (muln m n2)) (leq n1 n2))) (theorem leq_pmul2r (eq (leq (muln n1 m) (muln n2 m)) (leq n1 n2))) (theorem eqn_pmul2l (eq (eq_op (muln m n1) (muln m n2)) (eq_op n1 n2))) (theorem eqn_pmul2r (eq (eq_op (muln n1 m) (muln n2 m)) (eq_op n1 n2))) (theorem ltn_mul2l (eq (leq (S (muln m n1)) (muln m n2)) (andb (leq (S O) m) (leq (S n1) n2)))) (theorem ltn_mul2r (eq (leq (S (muln n1 m)) (muln n2 m)) (andb (leq (S O) m) (leq (S n1) n2)))) (theorem ltn_pmul2l (eq (leq (S (muln m n1)) (muln m n2)) (leq (S n1) n2))) (theorem ltn_pmul2r (eq (leq (S (muln n1 m)) (muln n2 m)) (leq (S n1) n2))) (theorem ltn_Pmull (leq (S m) (muln n m))) (theorem ltn_Pmulr (leq (S m) (muln m n))) (theorem ltn_mul (leq (S (muln m1 m2)) (muln n1 n2))) (theorem maxn_mulr (right_distributive muln maxn)) (theorem maxn_mull (left_distributive muln maxn)) (theorem minn_mulr (right_distributive muln minn)) (theorem minn_mull (left_distributive muln minn)) (theorem expnE (eq expn expn_rec)) (theorem expn0 (eq (expn m O) (S O))) (theorem expn1 (eq (expn m (S O)) m)) (theorem expnS (eq (expn m (S n)) (muln m (expn m n)))) (theorem expnSr (eq (expn m (S n)) (muln (expn m n) m))) (theorem exp0n (eq (expn O n) O)) (theorem exp1n (eq (expn (S O) n) (S O))) (theorem expnD (eq (expn m (addn n1 n2)) (muln (expn m n1) (expn m n2)))) (theorem expnMn (eq (expn (muln m1 m2) n) (muln (expn m1 n) (expn m2 n)))) (theorem expnM (eq (expn m (muln n1 n2)) (expn (expn m n1) n2))) (theorem expnAC (eq (expn (expn m n1) n2) (expn (expn m n2) n1))) (theorem expn_gt0 (eq (leq (S O) (expn m n)) (orb (leq (S O) m) (eq_op n O)))) (theorem expn_eq0 (eq (eq_op (expn m e) O) (andb (eq_op m O) (leq (S O) e)))) (theorem ltn_expl (leq (S n) (expn m n))) (theorem leq_exp2l (eq (leq (expn m n1) (expn m n2)) (leq n1 n2))) (theorem ltn_exp2l (eq (leq (S (expn m n1)) (expn m n2)) (leq (S n1) n2))) (theorem eqn_exp2l (eq (eq_op (expn m n1) (expn m n2)) (eq_op n1 n2))) (theorem expnI (injective (expn m))) (theorem leq_pexp2l (leq (expn m n1) (expn m n2))) (theorem ltn_pexp2l (leq (S n1) n2)) (theorem ltn_exp2r (eq (leq (S (expn m e)) (expn n e)) (leq (S m) n))) (theorem leq_exp2r (eq (leq (expn m e) (expn n e)) (leq m n))) (theorem eqn_exp2r (eq (eq_op (expn m e) (expn n e)) (eq_op m n))) (theorem expIn (injective (fun x : nat => expn x e))) (theorem factE (eq factorial fact_rec)) (theorem fact0 (eq (factorial O) (S O))) (theorem factS (eq (factorial (S n)) (muln (S n) (factorial n)))) (theorem fact_gt0 (leq (S O) (factorial n))) (theorem leq_b1 (leq b (S O))) (theorem addn_negb (eq (addn (negb b) b) (S O))) (theorem eqb0 (eq (eq_op (b:nat) (O:nat)) (negb b))) (theorem lt0b (eq (leq (S O) b) b)) (theorem sub1b (eq (subn (S O) b) (negb b))) (theorem mulnb (eq (muln b1 b2) (andb b1 b2))) (theorem oddb (eq (odd b) b)) (theorem odd_add (eq (odd (addn m n)) (addb (odd m) (odd n)))) (theorem odd_sub (eq (odd (subn m n)) (addb (odd m) (odd n)))) (theorem odd_opp (eq (odd (subn m i)) (odd i))) (theorem odd_mul (eq (odd (muln m n)) (andb (odd m) (odd n)))) (theorem odd_exp (eq (odd (expn m n)) (orb (eq_op n O) (odd m)))) (theorem doubleE (eq double double_rec)) (theorem double0 (eq (double O) O)) (theorem doubleS (eq (double (S n)) (S (S (double n))))) (theorem addnn (eq (addn n n) (double n))) (theorem mul2n (eq (muln (S (S O)) m) (double m))) (theorem muln2 (eq (muln m (S (S O))) (double m))) (theorem doubleD (eq (double (addn m n)) (addn (double m) (double n)))) (theorem doubleB (eq (double (subn m n)) (subn (double m) (double n)))) (theorem leq_double (eq (leq (double m) (double n)) (leq m n))) (theorem ltn_double (eq (leq (S (double m)) (double n)) (leq (S m) n))) (theorem ltn_Sdouble (eq (leq (S (S (double m))) (double n)) (leq (S m) n))) (theorem leq_Sdouble (eq (leq (double m) (S (double n))) (leq m n))) (theorem odd_double (eq (odd (double n)) false)) (theorem double_gt0 (eq (leq (S O) (double n)) (leq (S O) n))) (theorem double_eq0 (eq (eq_op (double n) O) (eq_op n O))) (theorem doubleMl (eq (double (muln m n)) (muln (double m) n))) (theorem doubleMr (eq (double (muln m n)) (muln m (double n)))) (theorem doubleK (cancel double half)) (theorem uphalf_double (eq (uphalf (double n)) n)) (theorem uphalf_half (eq (uphalf n) (addn (odd n) (half n)))) (theorem odd_double_half (eq (addn (odd n) (double (half n))) n)) (theorem half_bit_double (eq (half (addn b (double n))) n)) (theorem halfD (eq (half (addn m n)) (addn (andb (odd m) (odd n)) (addn (half m) (half n))))) (theorem half_leq (leq (half m) (half n))) (theorem half_gt0 (eq (leq (S O) (half n)) (leq (S (S O)) n))) (theorem mulnn (eq (muln m m) (expn m (S (S O))))) (theorem sqrnD (eq (expn (addn m n) (S (S O))) (addn (addn (expn m (S (S O))) (expn n (S (S O)))) (muln (S (S O)) (muln m n))))) (theorem sqrn_sub (eq (expn (subn m n) (S (S O))) (subn (addn (expn m (S (S O))) (expn n (S (S O)))) (muln (S (S O)) (muln m n))))) (theorem sqrnD_sub (eq (subn (expn (addn m n) (S (S O))) (muln (S (S (S (S O)))) (muln m n))) (expn (subn m n) (S (S O))))) (theorem subn_sqr (eq (subn (expn m (S (S O))) (expn n (S (S O)))) (muln (subn m n) (addn m n)))) (theorem ltn_sqr (eq (leq (S (expn m (S (S O)))) (expn n (S (S O)))) (leq (S m) n))) (theorem leq_sqr (eq (leq (expn m (S (S O))) (expn n (S (S O)))) (leq m n))) (theorem sqrn_gt0 (eq (leq (S O) (expn n (S (S O)))) (leq (S O) n))) (theorem eqn_sqr (eq (eq_op (expn m (S (S O))) (expn n (S (S O)))) (eq_op m n))) (theorem sqrn_inj (nat => expn x (S (S O)))) (theorem leqifP (eq_op m n)) (theorem leqif_refl (reflect (leqif m m c) c)) (theorem leqif_trans (leqif m1 m3 (andb c1 c2))) (theorem monotone_leqif (iff (leqif (f m) (f n) c) (leqif m n c))) (theorem leqif_geq (leqif m n (leq n m))) (theorem leqif_eq (leqif m n (eq_op m n))) (theorem geq_leqif (eq (leq b a) C)) (theorem ltn_leqif (eq (leq (S a) b) (negb C))) (theorem addE (eqrel add addn)) (theorem doubleE (eqfun double Top.double)) (theorem add_mulE (eq (add_mul n m s) (addn (muln n m) s))) (theorem mulE (eqrel mul muln)) (theorem mul_expE (eq (mul_exp m n p) (muln (expn m n) p))) (theorem expE (eqrel exp expn)) (theorem oddE (eqfun odd Top.odd)))