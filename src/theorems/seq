((theorem size0nil (eq s nil)) (theorem nilP (reflect (eq s nil) (nilp s))) (theorem size_behead (eq (size (behead s)) (Peano.pred (size s)))) (theorem size_ncons (eq (size (ncons n x s)) (addn n (size s)))) (theorem size_nseq (eq (size (nseq n x)) n)) (theorem cat0s (eq (cat nil s) s)) (theorem cat1s (eq (cat (cons x nil) s) (cons x s))) (theorem cat_cons (eq (cat (cons x s1) s2) (cons x (cat s1 s2)))) (theorem cat_nseq (eq (cat (nseq n x) s) (ncons n x s))) (theorem cats0 (eq (cat s nil) s)) (theorem catA (eq (cat s1 (cat s2 s3)) (cat (cat s1 s2) s3))) (theorem size_cat (eq (size (cat s1 s2)) (addn (size s1) (size s2)))) (theorem rcons_cons (eq (rcons (cons x s) z) (cons x (rcons s z)))) (theorem cats1 (eq (cat s (cons z nil)) (rcons s z))) (theorem lastI (eq (cons x s) (rcons (belast x s) (last x s)))) (theorem last_cons (eq (last x (cons y s)) (last y s))) (theorem size_rcons (eq (size (rcons s x)) (S (size s)))) (theorem size_belast (eq (size (belast x s)) (size s))) (theorem last_cat (eq (last x (cat s1 s2)) (last (last x s1) s2))) (theorem last_rcons (eq (last x (rcons s z)) z)) (theorem belast_cat (eq (belast x (cat s1 s2)) (cat (belast x s1) (belast (last x s1) s2)))) (theorem belast_rcons (eq (belast x (rcons s z)) (cons x s))) (theorem cat_rcons (eq (cat (rcons s1 x) s2) (cat s1 (cons x s2)))) (theorem rcons_cat (eq (rcons (cat s1 s2) x) (cat s1 (rcons s2 x)))) (theorem lastP (last_spec s)) (theorem nth0 (eq (nth s O) (head s))) (theorem nth_default (eq (nth s n) x0)) (theorem nth_nil (eq (nth nil n) x0)) (theorem last_nth (eq (last x s) (nth (cons x s) (size s)))) (theorem nth_last (eq (nth s (Peano.pred (size s))) (last x0 s))) (theorem nth_behead (eq (nth (behead s) n) (nth s (S n)))) (theorem nth_cat (nth s1 n)) (theorem nth_rcons (nth s n)) (theorem nth_ncons (x)) (theorem nth_nseq (x)) (theorem count_filter (eq (count s) (size (filter s)))) (theorem has_count (eq (has s) (leq (S O) (count s)))) (theorem count_size (leq (count s) (size s))) (theorem all_count (eq (all s) (eq_op (count s) (size s)))) (theorem filter_all (all (filter s))) (theorem all_filterP (reflect (eq (filter s) s) (all s))) (theorem filter_id (eq (filter (filter s)) (filter s))) (theorem has_find (eq (has s) (leq (S (find s)) (size s)))) (theorem find_size (leq (find s) (size s))) (theorem find_cat (find s1)) (theorem has_nil (eq (has nil) false)) (theorem has_seq1 (eq (has (cons x nil)) (a x))) (theorem has_seqb (eq (has (nseq b x)) (andb b (a x)))) (theorem all_nil (eq (all nil) true)) (theorem all_seq1 (eq (all (cons x nil)) (a x))) (theorem nth_find (a (nth s (find s)))) (theorem before_find (eq (a (nth s i)) false)) (theorem filter_cat (eq (filter (cat s1 s2)) (cat (filter s1) (filter s2)))) (theorem filter_rcons (rcons (filter s) x)) (theorem count_cat (eq (count (cat s1 s2)) (addn (count s1) (count s2)))) (theorem has_cat (eq (has (cat s1 s2)) (orb (has s1) (has s2)))) (theorem has_rcons (eq (has (rcons s x)) (orb (a x) (has s)))) (theorem all_cat (eq (all (cat s1 s2)) (andb (all s1) (all s2)))) (theorem all_rcons (eq (all (rcons s x)) (andb (a x) (all s)))) (theorem eq_find (eqfun (find a1) (find a2))) (theorem eq_filter (eqfun (filter a1) (filter a2))) (theorem eq_count (eqfun (count a1) (count a2))) (theorem eq_has (eqfun (has a1) (has a2))) (theorem eq_all (eqfun (all a1) (all a2))) (theorem sub_find (leq (find a2 s) (find a1 s))) (theorem sub_has (has a2 s)) (theorem sub_count (leq (count a1 s) (count a2 s))) (theorem sub_all (all a2 s)) (theorem filter_pred0 (eq (filter pred0 s) nil)) (theorem filter_predT (eq (filter predT s) s)) (theorem filter_predI (eq (filter (predI a1 a2) s) (filter a1 (filter a2 s)))) (theorem count_pred0 (eq (count pred0 s) O)) (theorem count_predT (eq (count predT s) (size s))) (theorem count_predUI (eq (addn (count (predU a1 a2) s) (count (predI a1 a2) s)) (addn (count a1 s) (count a2 s)))) (theorem count_predC (eq (addn (count a s) (count (predC a) s)) (size s))) (theorem has_pred0 (eq (has pred0 s) false)) (theorem has_predT (eq (has predT s) (leq (S O) (size s)))) (theorem has_predC (eq (has (predC a) s) (negb (all a s)))) (theorem has_predU (eq (has (predU a1 a2) s) (orb (has a1 s) (has a2 s)))) (theorem all_pred0 (eq (all pred0 s) (eq_op (size s) O))) (theorem all_predT (all predT s)) (theorem all_predC (eq (all (predC a) s) (negb (has a s)))) (theorem all_predI (eq (all (predI a1 a2) s) (andb (all a1 s) (all a2 s)))) (theorem drop_behead (eqfun (drop n0) (iter n0 behead))) (theorem drop0 (eq (drop O s) s)) (theorem drop1 (eqfun (drop (S O)) behead)) (theorem drop_oversize (eq (drop n s) nil)) (theorem drop_size (eq (drop (size s) s) nil)) (theorem drop_cons (cons x s)) (theorem size_drop (eq (size (drop n0 s)) (subn (size s) n0))) (theorem drop_cat (cat (drop n0 s1) s2)) (theorem drop_size_cat (eq (drop n (cat s1 s2)) s2)) (theorem nconsK (cancel (ncons n x) (drop n))) (theorem take0 (eq (take O s) nil)) (theorem take_oversize (eq (take n s) s)) (theorem take_size (eq (take (size s) s) s)) (theorem take_cons (nil)) (theorem size_takel (eq (size (take n0 s)) n0)) (theorem size_take (n0)) (theorem take_cat (take n0 s1)) (theorem take_size_cat (eq (take n (cat s1 s2)) s1)) (theorem nth_drop (eq (nth (drop n0 s) i) (nth s (addn n0 i)))) (theorem drop_nth (eq (drop n s) (cons (nth s n) (drop (S n) s)))) (theorem take_nth (eq (take (S n) s) (rcons (take n s) (nth s n)))) (theorem rot0 (eq (rot O s) s)) (theorem size_rot (eq (size (rot n0 s)) (size s))) (theorem rot_oversize (eq (rot n s) s)) (theorem rot_size (eq (rot (size s) s) s)) (theorem has_rot (eq (has a (rot n0 s)) (has a s))) (theorem rot_size_cat (eq (rot (size s1) (cat s1 s2)) (cat s2 s1))) (theorem rotK (cancel (rot n0) (rotr n0))) (theorem rot_inj (injective (rot n0))) (theorem rot1_cons (eq (rot (S O) (cons x s)) (rcons s x))) (theorem catrev_catl (eq (catrev (cat s t) u) (catrev t (catrev s u)))) (theorem catrev_catr (eq (catrev s (cat t u)) (cat (catrev s t) u))) (theorem catrevE (eq (catrev s t) (cat (rev s) t))) (theorem rev_cons (eq (rev (cons x s)) (rcons (rev s) x))) (theorem size_rev (eq (size (rev s)) (size s))) (theorem rev_cat (eq (rev (cat s t)) (cat (rev t) (rev s)))) (theorem rev_rcons (eq (rev (rcons s x)) (cons x (rev s)))) (theorem revK (involutive rev)) (theorem nth_rev (eq (nth x0 (rev s) n) (nth x0 s (subn (size s) (S n))))) (theorem eqseqP (Equality.axiom eqseq)) (theorem eqseqE (eq eqseq eq_op)) (theorem eqseq_cons (eq (eq_op (cons x1 s1) (cons x2 s2)) (andb (eq_op x1 x2) (eq_op s1 s2)))) (theorem eqseq_cat (eq (eq_op (cat s1 s3) (cat s2 s4)) (andb (eq_op s1 s2) (eq_op s3 s4)))) (theorem eqseq_rcons (eq (eq_op (rcons s1 x1) (rcons s2 x2)) (andb (eq_op s1 s2) (eq_op x1 x2)))) (theorem has_filter (eq (has a s) (negb (eq_op (filter a s) nil)))) (theorem size_eq0 (eq (eq_op (size s) O) (eq_op s nil))) (theorem in_cons (eq (in_mem x (mem (cons y s))) (orb (eq_op x y) (in_mem x (mem s))))) (theorem in_nil (eq (in_mem x (mem nil)) false)) (theorem mem_seq1 (eq (in_mem x (mem (cons y nil))) (eq_op x y))) (theorem mem_seq2 (eq (in_mem x (mem (cons y1 (cons y2 nil)))) ((fun (a1 a2 : T) x0 => orb (eq_op x0 a1) (eq_op x0 a2)) y1 y2 x))) (theorem mem_seq3 (eq (in_mem x (mem (cons y1 (cons y2 (cons y3 nil))))) ((fun (a1 a2 a3 : T) x0 => orb (eq_op x0 a1) (orb (eq_op x0 a2) (eq_op x0 a3))) y1 y2 y3 x))) (theorem mem_seq4 (eq (in_mem x (mem (cons y1 (cons y2 (cons y3 (cons y4 nil)))))) ((fun (a1 a2 a3 a4 : T) x0 => orb (eq_op x0 a1) (orb (eq_op x0 a2) (orb (eq_op x0 a3) (eq_op x0 a4)))) y1 y2 y3 y4 x))) (theorem mem_cat (eq (in_mem x (mem (cat s1 s2))) (orb (in_mem x (mem s1)) (in_mem x (mem s2))))) (theorem mem_rcons (eq_mem (mem (rcons s y)) (mem (cons y s)))) (theorem mem_head (in_mem x (mem (cons x s)))) (theorem mem_last (in_mem (last x s) (mem (cons x s)))) (theorem mem_behead (sub_mem (mem (behead s)) (mem s))) (theorem mem_belast (sub_mem (mem (belast y s)) (mem (cons y s)))) (theorem mem_nth (in_mem (Top.nth x0 s n) (mem s))) (theorem mem_take (in_mem x (mem s))) (theorem mem_drop (in_mem x (mem s))) (theorem mem_rev (eq_mem (mem (rev s)) (mem s))) (theorem hasP (reflect (ex2 (fun x => in_mem x (mem s)) (fun x => a x)) (has a s))) (theorem mem_filter (eq (in_mem x (mem (filter a s))) (andb (a x) (in_mem x (mem s))))) (theorem eq_in_filter (eq (filter a1 s) (filter a2 s))) (theorem eq_in_find (eq (find a1 s) (find a2 s))) (theorem eq_in_count (eq (count a1 s) (count a2 s))) (theorem eq_in_all (eq (all a1 s) (all a2 s))) (theorem eq_in_has (eq (has a1 s) (has a2 s))) (theorem eq_has_r (eqfun (fun x : pred T => has x s1) (fun x : pred T => has x s2))) (theorem eq_all_r (eqfun (fun x : pred T => all x s1) (fun x : pred T => all x s2))) (theorem has_sym (eq (has (mem s1) s2) (has (mem s2) s1))) (theorem has_pred1 (eq (has (pred1 x) s) (in_mem x (mem s)))) (theorem all_pred1P (reflect (eq s (nseq (size s) x)) (all (pred1 x) s))) (theorem all_pred1_constant (constant s)) (theorem all_pred1_nseq (eq (all (pred1 x) (nseq n y)) (orb (eq_op n O) (eq_op x y)))) (theorem constant_nseq (constant (nseq n x))) (theorem constantP (reflect (ex (fun x => eq s (nseq (size s) x))) (constant s))) (theorem cons_uniq (eq (uniq (cons x s)) (andb (negb (in_mem x (mem s))) (uniq s)))) (theorem cat_uniq (eq (uniq (cat s1 s2)) (andb (uniq s1) (andb (negb (has (mem s1) s2)) (uniq s2))))) (theorem uniq_catC (eq (uniq (cat s1 s2)) (uniq (cat s2 s1)))) (theorem uniq_catCA (eq (uniq (cat s1 (cat s2 s3))) (uniq (cat s2 (cat s1 s3))))) (theorem rcons_uniq (eq (uniq (rcons s x)) (andb (negb (in_mem x (mem s))) (uniq s)))) (theorem filter_uniq (uniq (filter a s))) (theorem rot_uniq (eq (uniq (rot n0 s)) (uniq s))) (theorem rev_uniq (eq (uniq (rev s)) (uniq s))) (theorem count_uniq_mem (eq (count (pred1 x) s) (in_mem x (mem s)))) (theorem filter_pred1_uniq (eq (filter (pred1 x) s) (cons x nil))) (theorem size_undup (leq (size (undup s)) (size s))) (theorem mem_undup (eq_mem (mem (undup s)) (mem s))) (theorem undup_uniq (uniq (undup s))) (theorem undup_id (eq (undup s) s)) (theorem ltn_size_undup (eq (leq (S (size (undup s))) (size s)) (negb (uniq s)))) (theorem filter_undup (eq (filter p (undup s)) (undup (filter p s)))) (theorem index_size (leq (index x s) (size s))) (theorem index_mem (eq (leq (S (index x s)) (size s)) (in_mem x (mem s)))) (theorem nth_index (eq (Top.nth x0 s (index x s)) x)) (theorem index_cat (index x s1)) (theorem index_uniq (eq (index (Top.nth x0 s i) s) i)) (theorem index_head (eq (index x (cons x s)) O)) (theorem index_last (eq (index (last x s) (cons x s)) (size s))) (theorem nth_uniq (eq (eq_op (Top.nth x0 s i) (Top.nth x0 s j)) (eq_op i j))) (theorem mem_rot (eq_mem (mem (rot n0 s)) (mem s))) (theorem eqseq_rot (eq (eq_op (rot n0 s1) (rot n0 s2)) (eq_op s1 s2))) (theorem rot_to (rot_to_spec s x)) (theorem nthP (reflect (ex2 (fun i : nat => leq (S i) (size s)) (fun i : nat => eq (nth x0 s i) x)) (in_mem x (mem s)))) (theorem has_nthP (reflect (ex2 (fun i : nat => leq (S i) (size s)) (fun i : nat => a (nth x0 s i))) (has a s))) (theorem set_nth_default (eq (nth x0 s n) (nth y0 s n))) (theorem headI (eq (rcons s x) (cons (head x s) (behead (rcons s x))))) (theorem nth_incr_nth (eq (nth O (incr_nth v i) j) (addn (eq_op i j) (nth O v j)))) (theorem size_incr_nth (size v)) (theorem perm_eqP (reflect (eqfun (fun x : pred T => count x s1) (fun x : pred T => count x s2)) (perm_eq s1 s2))) (theorem perm_eq_refl (perm_eq s s)) (theorem perm_eq_sym (symmetric perm_eq)) (theorem perm_eq_trans (transitive perm_eq)) (theorem perm_eqlE (perm_eq s1 s2)) (theorem perm_eqlP (reflect (eqfun (perm_eq s1) (perm_eq s2)) (perm_eq s1 s2))) (theorem perm_eqrP (reflect (eqfun (fun x : list T => perm_eq x s1) (fun x : list T => perm_eq x s2)) (perm_eq s1 s2))) (theorem perm_catC (eqfun (perm_eq (cat s1 s2)) (perm_eq (cat s2 s1)))) (theorem perm_cat2l (eq (perm_eq (cat s1 s2) (cat s1 s3)) (perm_eq s2 s3))) (theorem perm_cons (eq (perm_eq (cons x s1) (cons x s2)) (perm_eq s1 s2))) (theorem perm_cat2r (eq (perm_eq (cat s2 s1) (cat s3 s1)) (perm_eq s2 s3))) (theorem perm_catAC (eqfun (perm_eq (cat (cat s1 s2) s3)) (perm_eq (cat (cat s1 s3) s2)))) (theorem perm_catCA (eqfun (perm_eq (cat s1 (cat s2 s3))) (perm_eq (cat s2 (cat s1 s3))))) (theorem perm_rcons (eqfun (perm_eq (rcons s x)) (perm_eq (cons x s)))) (theorem perm_rot (eqfun (perm_eq (rot n s)) (perm_eq s))) (theorem perm_rotr (eqfun (perm_eq (rotr n s)) (perm_eq s))) (theorem perm_filterC (eqfun (perm_eq (cat (filter a s) (filter (predC a) s))) (perm_eq s))) (theorem perm_eq_mem (eq_mem (mem s1) (mem s2))) (theorem perm_eq_size (eq (size s1) (size s2))) (theorem perm_eq_small (eq s1 s2)) (theorem uniq_leq_size (leq (size s1) (size s2))) (theorem leq_size_uniq (uniq s2)) (theorem uniq_size_uniq (eq (uniq s2) (eq_op (size s2) (size s1)))) (theorem leq_size_perm (and (eq_mem (mem s1) (mem s2)) (eq (size s1) (size s2)))) (theorem perm_uniq (eq (uniq s1) (uniq s2))) (theorem perm_eq_uniq (eq (uniq s1) (uniq s2))) (theorem uniq_perm_eq (perm_eq s1 s2)) (theorem size_rotr (eq (size (rotr n0 s)) (size s))) (theorem mem_rotr (eq_mem (mem (rotr n0 s)) (mem s))) (theorem rotr_size_cat (eq (rotr (size s2) (cat s1 s2)) (cat s2 s1))) (theorem rotr1_rcons (eq (rotr (S O) (rcons s x)) (cons x s))) (theorem has_rotr (eq (has a (rotr n0 s)) (has a s))) (theorem rotr_uniq (eq (uniq (rotr n0 s)) (uniq s))) (theorem rotrK (cancel (rotr n0) (rot n0))) (theorem rotr_inj (injective (rotr n0))) (theorem rev_rot (eq (rev (rot n0 s)) (rotr n0 (rev s)))) (theorem rev_rotr (eq (rev (rotr n0 s)) (rot n0 (rev s)))) (theorem rot_addn (eq (rot (addn m n) s) (rot m (rot n s)))) (theorem rotS (eq (rot (S n) s) (rot (S O) (rot n s)))) (theorem rot_add_mod (addn m n)) (theorem rot_rot (eq (rot m (rot n s)) (rot n (rot m s)))) (theorem rot_rotr (eq (rot m (rotr n s)) (rotr n (rot m s)))) (theorem rotr_rotr (eq (rotr m (rotr n s)) (rotr n (rotr m s)))) (theorem mask_false (eq (mask (nseq n false) s) nil)) (theorem mask_true (eq (mask (nseq n true) s) s)) (theorem mask0 (eq (mask m nil) nil)) (theorem mask1 (eq (mask (cons b nil) (cons x nil)) (nseq b x))) (theorem mask_cons (eq (mask (cons b m) (cons x s)) (cat (nseq b x) (mask m s)))) (theorem size_mask (eq (size (mask m s)) (count (fun x : bool => x) m))) (theorem mem_mask_cons (eq (in_mem x (mem (mask (cons b m) (cons y s)))) (orb (andb b (eq_op x y)) (in_mem x (mem (mask m s)))))) (theorem mem_mask (in_mem x (mem s))) (theorem mask_uniq (uniq (mask m s))) (theorem mem_mask_rot (eq_mem (mem (mask (rot n0 m) (rot n0 s))) (mem (mask m s)))) (theorem sub0seq (subseq nil s)) (theorem subseq0 (eq (subseq s nil) (eq_op s nil))) (theorem subseqP (reflect (ex2 (fun m : list bool => eq (size m) (size s2)) (fun m : list bool => eq s1 (mask m s2))) (subseq s1 s2))) (theorem subseq_trans (transitive subseq)) (theorem subseq_refl (subseq s s)) (theorem cat_subseq (subseq (cat s1 s2) (cat s3 s4))) (theorem prefix_subseq (subseq s1 (cat s1 s2))) (theorem suffix_subseq (subseq s2 (cat s1 s2))) (theorem mem_subseq (sub_mem (mem s1) (mem s2))) (theorem sub1seq (eq (subseq (cons x nil) s) (in_mem x (mem s)))) (theorem size_subseq (leq (size s1) (size s2))) (theorem size_subseq_leqif (leqif (size s1) (size s2) (eq_op s1 s2))) (theorem subseq_cons (subseq s (cons x s))) (theorem subseq_rcons (subseq s (rcons s x))) (theorem subseq_uniq (uniq s1)) (theorem rem_id (eq (rem s) s)) (theorem perm_to_rem (perm_eq s (cons x (rem s)))) (theorem size_rem (eq (size (rem s)) (Peano.pred (size s)))) (theorem rem_subseq (subseq (rem s) s)) (theorem rem_uniq (uniq (rem s))) (theorem mem_rem (sub_mem (mem (rem s)) (mem s))) (theorem rem_filter (eq (rem s) (filter (predC1 x) s))) (theorem mem_rem_uniq (eq_mem (mem (rem s)) (mem (predD1 (mem s) x)))) (theorem map_cons (eq (map (cons x s)) (cons (f x) (map s)))) (theorem map_nseq (eq (map (nseq n0 x)) (nseq n0 (f x)))) (theorem map_cat (eq (map (cat s1 s2)) (cat (map s1) (map s2)))) (theorem size_map (eq (size (map s)) (size s))) (theorem behead_map (eq (behead (map s)) (map (behead s)))) (theorem nth_map (eq (nth x2 (map s) n) (f (nth x1 s n)))) (theorem map_rcons (eq (map (rcons s x)) (rcons (map s) (f x)))) (theorem last_map (eq (last (f x) (map s)) (f (last x s)))) (theorem belast_map (eq (belast (f x) (map s)) (map (belast x s)))) (theorem filter_map (eq (filter a (map s)) (map (filter (preim f a) s)))) (theorem find_map (eq (find a (map s)) (find (preim f a) s))) (theorem has_map (eq (has a (map s)) (has (preim f a) s))) (theorem all_map (eq (all a (map s)) (all (preim f a) s))) (theorem count_map (eq (count a (map s)) (count (preim f a) s))) (theorem map_take (eq (map (take n0 s)) (take n0 (map s)))) (theorem map_drop (eq (map (drop n0 s)) (drop n0 (map s)))) (theorem map_rot (eq (map (rot n0 s)) (rot n0 (map s)))) (theorem map_rotr (eq (map (rotr n0 s)) (rotr n0 (map s)))) (theorem map_rev (eq (map (rev s)) (rev (map s)))) (theorem map_mask (eq (map (mask m s)) (mask m (map s)))) (theorem inj_map (injective map)) (theorem filter_mask (eq (filter a s) (mask (map a s) s))) (theorem filter_subseq (subseq (filter a s) s)) (theorem subseq_filter (eq (subseq s1 (filter a s2)) (andb (all a s1) (subseq s1 s2)))) (theorem subseq_uniqP (reflect (eq s1 (filter (mem s1) s2)) (subseq s1 s2))) (theorem perm_to_subseq (sig (fun s3 => perm_eq s2 (cat s1 s3)))) (theorem map_f (in_mem (f x) (mem (map f s)))) (theorem mapP (reflect (ex2 (fun x : T1 => in_mem x (mem s)) (fun x : T1 => eq y (f x))) (in_mem y (mem (map f s))))) (theorem map_uniq (uniq s)) (theorem map_inj_in_uniq (eq (uniq (map f s)) (uniq s))) (theorem map_subseq (subseq (map f s1) (map f s2))) (theorem nth_index_map (eq (nth x0 s (index (f x) (map f s))) x)) (theorem perm_map (perm_eq (map f s) (map f t))) (theorem mem_map (eq (in_mem (f x) (mem (map f s))) (in_mem x (mem s)))) (theorem index_map (eq (index (f x) (map f s)) (index x s))) (theorem map_inj_uniq (eq (uniq (map f s)) (uniq s))) (theorem map_of_seq (eq (map f s) fs)) (theorem map_id (eq (map (fun x : T1 => x) s) s)) (theorem eq_map (eqfun (map f1) (map f2))) (theorem map_comp (eq (map (funcomp tt f1 f2) s) (map f1 (map f2 s)))) (theorem mapK (cancel (map f1) (map f2))) (theorem eq_in_map (eq (map f1 s) (map f2 s))) (theorem map_id_in (eq (map f s) s)) (theorem pmap_filter (eq (map g (pmap s)) (filter (fun x : aT => f x) s))) (theorem eq_pmap (eqfun (pmap f1) (pmap f2))) (theorem mem_pmap (eq (in_mem u (mem (pmap f s))) (in_mem (Some u) (mem (map f s))))) (theorem can2_mem_pmap (eq (in_mem u (mem (pmap f s))) (in_mem (g u) (mem s)))) (theorem pmap_uniq (uniq (pmap f s))) (theorem size_pmap_sub (option sT)) (theorem mem_pmap_sub (eq (in_mem u (mem (pmap insT s))) (in_mem (val u) (mem s)))) (theorem pmap_sub_uniq (uniq (pmap insT s))) (theorem size_iota (eq (size (iota m n)) n)) (theorem iota_add (eq (iota m (addn n1 n2)) (cat (iota m n1) (iota (addn m n1) n2)))) (theorem iota_addl (eq (iota (addn m1 m2) n) (map (addn m1) (iota m2 n)))) (theorem nth_iota (eq (nth O (iota m n) i) (addn m i))) (theorem mem_iota (eq (in_mem i (mem (iota m n))) (andb (leq m i) (leq (S i) (addn m n))))) (theorem iota_uniq (uniq (iota m n))) (theorem size_mkseq (eq (size (mkseq f n)) n)) (theorem eq_mkseq (eqfun (mkseq f) (mkseq g))) (theorem nth_mkseq (eq (nth x0 (mkseq f n) i) (f i))) (theorem mkseq_nth (eq (mkseq (nth x0 s) (size s)) s)) (theorem mkseq_uniq (uniq (mkseq f n))) (theorem perm_eq_iotaP (let It := iota O (size x2667) in reflect (ex2 (fun Is : list nat_eqType => perm_eq Is It) (fun Is : list nat_eqType => eq x2666 (map (nth x0 x2667) Is))) (perm_eq x2666 x2667))) (theorem foldr_cat (eq (foldr f z0 (cat s1 s2)) (foldr f (foldr f z0 s2) s1))) (theorem foldr_map (eq (foldr f z0 (map h s)) (foldr (fun (x : T1) (z : R) => f (h x) z) z0 s))) (theorem sumn_nseq (eq (sumn (nseq n x)) (muln x n))) (theorem sumn_cat (eq (sumn (cat s1 s2)) (addn (sumn s1) (sumn s2)))) (theorem natnseq0P (reflect (eq s (nseq (size s) O)) (eq_op (sumn s) O))) (theorem foldl_rev (eq (foldl z (rev s)) (foldr (fun (x : T) (z0 : R) => f z0 x) z s))) (theorem foldl_cat (eq (foldl z (cat s1 s2)) (foldl (foldl z s1) s2))) (theorem size_pairmap (eq (size (pairmap x s)) (size s))) (theorem pairmap_cat (eq (pairmap x (cat s1 s2)) (cat (pairmap x s1) (pairmap (last x s1) s2)))) (theorem size_scanl (eq (size (scanl x s)) (size s))) (theorem scanl_cat (eq (scanl x (cat s1 s2)) (cat (scanl x s1) (scanl (foldl g x s1) s2)))))