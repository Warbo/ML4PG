(defun init-clusters ()
  "This function is in charge of processing the output produced by Matlab"
  (interactive)
  (my-config-display)
  (require 'comint)

  (apply 'make-comint "matlab" *matlab-program* nil
         (list "-nodesktop -r 0")))

(defun print-similarities-aux (action res)
  (interactive)
  (cond ((not (caar res))
         (insert (format "Searching similarities...\n")))
        ((search "None" (caar res))
         (if (not iterative)
             (insert (format "Sorry, but we have not found any similarity using granularity %s\n" granularity-level))
           (if (eq granularity-level-temp 5)
               (format "Sorry, but we have not found any similarity at any ganularity level\n")
             (progn (setf granularity-level-temp (1+ granularity-level-temp))
                    (show-clusters-of-theorem-iterative)))))
        (t (progn (insert (format "Similarities:\n"))
                  (insert (format "------------------------------------------------------------------------------------------------------------\n"))
                  (insert (format "This lemma is similar to the lemmas:\n"))
                  (do ((temp2 (remove-occurrence (car res)
                                                 (1+ (length saved-theorems)))
                              (cdr temp2)))
                      ((endp temp2))
                    (if (<= (string-to-number (car temp2))
                            (length saved-theorems))
                        (progn (insert (format "- "))
                               (insert-button-lemma (remove_last_colon(car (nth (- (string-to-number (car temp2))
                                                                                   1)
                                                                                saved-theorems))))
                               (funcall action temp2))
                      (progn (shell-command (concat "cat "(expand-file-name "names_temp.txt")
                                                    " | sed -n '"
                                                    (format "%s" (- (string-to-number (car temp2))
                                                                    (length saved-theorems)))
                                                    "p'"))
                             (with-current-buffer "*Shell Command Output*"
                               (beginning-of-buffer)
                               (read (current-buffer))
                               (setf temp-res (remove_last_colon (format "%s"  (read (current-buffer))))))
                             (insert (format "- "))
                             (insert-button-lemma temp-res)))))
           (insert (format "------------------------------------------------------------------------------------------------------------\n"))
           (if iterative (insert (format "Similarities found using granularity level %s\n" granularity-level-temp))))))

(defun print-similarities-weka-str (n str)
  (print-similarities-weka-aux n (extract-clusters-from-file-aux str)))

(defun print-similarities-weka-aux (n clusters)
  (with-current-buffer "*display*"
    (erase-buffer)
    (insert "Similarities:\n")
    (insert "-----------------------------------------------------------------------------------\n")
    (insert "This lemma is similar to the lemmas:\n")
    (do ((temp2 (remove-occurrence (clusters-of-n clusters (nth (1- (length saved-theorems))
                                                                clusters))
                                   (1+ (length saved-theorems)))
                (cdr temp2)))
        ((endp temp2))
      (if (<= (car temp2) (length saved-theorems))
          (progn (insert "- ")
                 (insert-button-lemma (remove_last_colon (car (nth (- (car temp2)
                                                                      1)
                                                                   saved-theorems)))))
        (progn (shell-command (concat "cat "(expand-file-name "names_temp.txt")
                                      " | sed -n '"
                                      (format "%s" (- (car temp2)
                                                      (length saved-theorems)))
                                      "p'"))
               (with-current-buffer "*Shell Command Output*"
                 (beginning-of-buffer)
                 (read (current-buffer))
                 (setf temp-res (remove_last_colon (format "%s"  (read (current-buffer))))))
               (insert "- ")
               (insert-button-lemma temp-res))))
    (insert "-----------------------------------------------------------------------------------\n")))

(defun print-in-display (str)
  (with-current-buffer "*display*"
    (erase-buffer)
    (insert str)))

(defun print-clusters-weka-namecmd (elem)
  (shell-command (concat "cat "(expand-file-name "names_temp.txt")
                         " | sed -n '"
                         (format "%s" (- elem (length saved-theorems)))
                         "p'"))

  (with-current-buffer "*Shell Command Output*"
    (beginning-of-buffer)
    (read (current-buffer))
    (setf temp-res (format "%s" (read (current-buffer))))))
